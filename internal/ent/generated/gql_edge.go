// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (t *Tenant) Parent(ctx context.Context) (*Tenant, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) Children(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenantOrder, where *TenantWhereInput,
) (*TenantConnection, error) {
	opts := []TenantPaginateOption{
		WithTenantOrder(orderBy),
		WithTenantFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[1][alias]
	if nodes, err := t.NamedChildren(alias); err == nil || hasTotalCount {
		pager, err := newTenantPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenantConnection{Edges: []*TenantEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryChildren().Paginate(ctx, after, first, before, last, opts...)
}

// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetTenant(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTenant, error)
	GetTenantChildByID(ctx context.Context, id gidx.PrefixedID, childID gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantChildByID, error)
	GetTenantChildren(ctx context.Context, id gidx.PrefixedID, orderBy *TenantOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantChildren, error)
	TenantCreate(ctx context.Context, input CreateTenantInput, httpRequestOptions ...client.HTTPRequestOption) (*TenantCreate, error)
	TenantDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*TenantDelete, error)
	TenantUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateTenantInput, httpRequestOptions ...client.HTTPRequestOption) (*TenantUpdate, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Tenant   Tenant   "json:\"tenant\" graphql:\"tenant\""
	Entities []Entity "json:\"_entities\" graphql:\"_entities\""
	Service  Service  "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	TenantCreate TenantCreatePayload "json:\"tenantCreate\" graphql:\"tenantCreate\""
	TenantUpdate TenantUpdatePayload "json:\"tenantUpdate\" graphql:\"tenantUpdate\""
	TenantDelete TenantDeletePayload "json:\"tenantDelete\" graphql:\"tenantDelete\""
}
type GetTenant struct {
	Tenant struct {
		ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name        string          "json:\"name\" graphql:\"name\""
		Description *string         "json:\"description\" graphql:\"description\""
		CreatedAt   time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt   time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		Parent      *struct {
			ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name string          "json:\"name\" graphql:\"name\""
		} "json:\"parent\" graphql:\"parent\""
	} "json:\"tenant\" graphql:\"tenant\""
}
type GetTenantChildByID struct {
	Tenant struct {
		Children struct {
			Edges []*struct {
				Node *struct {
					ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name        string          "json:\"name\" graphql:\"name\""
					Description *string         "json:\"description\" graphql:\"description\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"children\" graphql:\"children\""
	} "json:\"tenant\" graphql:\"tenant\""
}
type GetTenantChildren struct {
	Tenant struct {
		Children struct {
			Edges []*struct {
				Node *struct {
					ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name        string          "json:\"name\" graphql:\"name\""
					Description *string         "json:\"description\" graphql:\"description\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"children\" graphql:\"children\""
	} "json:\"tenant\" graphql:\"tenant\""
}
type TenantCreate struct {
	TenantCreate struct {
		Tenant struct {
			ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name        string          "json:\"name\" graphql:\"name\""
			Description *string         "json:\"description\" graphql:\"description\""
			Parent      *struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"parent\" graphql:\"parent\""
		} "json:\"tenant\" graphql:\"tenant\""
	} "json:\"tenantCreate\" graphql:\"tenantCreate\""
}
type TenantDelete struct {
	TenantDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"tenantDelete\" graphql:\"tenantDelete\""
}
type TenantUpdate struct {
	TenantUpdate struct {
		Tenant struct {
			ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name        string          "json:\"name\" graphql:\"name\""
			Description *string         "json:\"description\" graphql:\"description\""
			Parent      *struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"parent\" graphql:\"parent\""
		} "json:\"tenant\" graphql:\"tenant\""
	} "json:\"tenantUpdate\" graphql:\"tenantUpdate\""
}

const GetTenantDocument = `query GetTenant ($id: ID!) {
	tenant(id: $id) {
		id
		name
		description
		createdAt
		updatedAt
		parent {
			id
			name
		}
	}
}
`

func (c *Client) GetTenant(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTenant, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetTenant
	if err := c.Client.Post(ctx, "GetTenant", GetTenantDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTenantChildByIDDocument = `query GetTenantChildByID ($id: ID!, $childID: ID!) {
	tenant(id: $id) {
		children(where: {id:$childID}) {
			edges {
				node {
					id
					name
					description
				}
			}
		}
	}
}
`

func (c *Client) GetTenantChildByID(ctx context.Context, id gidx.PrefixedID, childID gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantChildByID, error) {
	vars := map[string]interface{}{
		"id":      id,
		"childID": childID,
	}

	var res GetTenantChildByID
	if err := c.Client.Post(ctx, "GetTenantChildByID", GetTenantChildByIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTenantChildrenDocument = `query GetTenantChildren ($id: ID!, $orderBy: TenantOrder) {
	tenant(id: $id) {
		children(orderBy: $orderBy) {
			edges {
				node {
					id
					name
					description
				}
			}
		}
	}
}
`

func (c *Client) GetTenantChildren(ctx context.Context, id gidx.PrefixedID, orderBy *TenantOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantChildren, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetTenantChildren
	if err := c.Client.Post(ctx, "GetTenantChildren", GetTenantChildrenDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TenantCreateDocument = `mutation TenantCreate ($input: CreateTenantInput!) {
	tenantCreate(input: $input) {
		tenant {
			id
			name
			description
			parent {
				id
			}
		}
	}
}
`

func (c *Client) TenantCreate(ctx context.Context, input CreateTenantInput, httpRequestOptions ...client.HTTPRequestOption) (*TenantCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res TenantCreate
	if err := c.Client.Post(ctx, "TenantCreate", TenantCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TenantDeleteDocument = `mutation TenantDelete ($id: ID!) {
	tenantDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) TenantDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*TenantDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res TenantDelete
	if err := c.Client.Post(ctx, "TenantDelete", TenantDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TenantUpdateDocument = `mutation TenantUpdate ($id: ID!, $input: UpdateTenantInput!) {
	tenantUpdate(id: $id, input: $input) {
		tenant {
			id
			name
			description
			parent {
				id
			}
		}
	}
}
`

func (c *Client) TenantUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateTenantInput, httpRequestOptions ...client.HTTPRequestOption) (*TenantUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res TenantUpdate
	if err := c.Client.Post(ctx, "TenantUpdate", TenantUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

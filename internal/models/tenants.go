// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
	"go.infratographer.com/tenant-api/internal/x/nullx"
	"go.infratographer.com/x/gidx"
)

// Tenant is an object representing the database table.
type Tenant struct {
	ID             gidx.PrefixedID  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	ParentTenantID nullx.PrefixedID `boil:"parent_tenant_id" json:"parent_tenant_id,omitempty" toml:"parent_tenant_id" yaml:"parent_tenant_id,omitempty"`
	CreatedAt      time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time        `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *tenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantColumns = struct {
	ID             string
	Name           string
	ParentTenantID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	Name:           "name",
	ParentTenantID: "parent_tenant_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var TenantTableColumns = struct {
	ID             string
	Name           string
	ParentTenantID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "tenants.id",
	Name:           "tenants.name",
	ParentTenantID: "tenants.parent_tenant_id",
	CreatedAt:      "tenants.created_at",
	UpdatedAt:      "tenants.updated_at",
	DeletedAt:      "tenants.deleted_at",
}

// Generated where

type whereHelpergidx_PrefixedID struct{ field string }

func (w whereHelpergidx_PrefixedID) EQ(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpergidx_PrefixedID) NEQ(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpergidx_PrefixedID) LT(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpergidx_PrefixedID) LTE(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpergidx_PrefixedID) GT(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpergidx_PrefixedID) GTE(x gidx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernullx_PrefixedID struct{ field string }

func (w whereHelpernullx_PrefixedID) EQ(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernullx_PrefixedID) NEQ(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernullx_PrefixedID) LT(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernullx_PrefixedID) LTE(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernullx_PrefixedID) GT(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernullx_PrefixedID) GTE(x nullx.PrefixedID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernullx_PrefixedID) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernullx_PrefixedID) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TenantWhere = struct {
	ID             whereHelpergidx_PrefixedID
	Name           whereHelperstring
	ParentTenantID whereHelpernullx_PrefixedID
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelpergidx_PrefixedID{field: "\"tenants\".\"id\""},
	Name:           whereHelperstring{field: "\"tenants\".\"name\""},
	ParentTenantID: whereHelpernullx_PrefixedID{field: "\"tenants\".\"parent_tenant_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"tenants\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"tenants\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"tenants\".\"deleted_at\""},
}

// TenantRels is where relationship names are stored.
var TenantRels = struct {
	ParentTenant        string
	ParentTenantTenants string
}{
	ParentTenant:        "ParentTenant",
	ParentTenantTenants: "ParentTenantTenants",
}

// tenantR is where relationships are stored.
type tenantR struct {
	ParentTenant        *Tenant     `boil:"ParentTenant" json:"ParentTenant" toml:"ParentTenant" yaml:"ParentTenant"`
	ParentTenantTenants TenantSlice `boil:"ParentTenantTenants" json:"ParentTenantTenants" toml:"ParentTenantTenants" yaml:"ParentTenantTenants"`
}

// NewStruct creates a new relationship struct
func (*tenantR) NewStruct() *tenantR {
	return &tenantR{}
}

func (r *tenantR) GetParentTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.ParentTenant
}

func (r *tenantR) GetParentTenantTenants() TenantSlice {
	if r == nil {
		return nil
	}
	return r.ParentTenantTenants
}

// tenantL is where Load methods for each relationship are stored.
type tenantL struct{}

var (
	tenantAllColumns            = []string{"id", "name", "parent_tenant_id", "created_at", "updated_at", "deleted_at"}
	tenantColumnsWithoutDefault = []string{"id", "name", "created_at", "updated_at"}
	tenantColumnsWithDefault    = []string{"parent_tenant_id", "deleted_at"}
	tenantPrimaryKeyColumns     = []string{"id"}
	tenantGeneratedColumns      = []string{}
)

type (
	// TenantSlice is an alias for a slice of pointers to Tenant.
	// This should almost always be used instead of []Tenant.
	TenantSlice []*Tenant
	// TenantHook is the signature for custom Tenant hook methods
	TenantHook func(context.Context, boil.ContextExecutor, *Tenant) error

	tenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantType                 = reflect.TypeOf(&Tenant{})
	tenantMapping              = queries.MakeStructMapping(tenantType)
	tenantPrimaryKeyMapping, _ = queries.BindMapping(tenantType, tenantMapping, tenantPrimaryKeyColumns)
	tenantInsertCacheMut       sync.RWMutex
	tenantInsertCache          = make(map[string]insertCache)
	tenantUpdateCacheMut       sync.RWMutex
	tenantUpdateCache          = make(map[string]updateCache)
	tenantUpsertCacheMut       sync.RWMutex
	tenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantAfterSelectHooks []TenantHook

var tenantBeforeInsertHooks []TenantHook
var tenantAfterInsertHooks []TenantHook

var tenantBeforeUpdateHooks []TenantHook
var tenantAfterUpdateHooks []TenantHook

var tenantBeforeDeleteHooks []TenantHook
var tenantAfterDeleteHooks []TenantHook

var tenantBeforeUpsertHooks []TenantHook
var tenantAfterUpsertHooks []TenantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tenant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tenant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tenant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tenant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tenant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tenant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tenant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tenant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tenant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantHook registers your hook function for all future operations.
func AddTenantHook(hookPoint boil.HookPoint, tenantHook TenantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantAfterSelectHooks = append(tenantAfterSelectHooks, tenantHook)
	case boil.BeforeInsertHook:
		tenantBeforeInsertHooks = append(tenantBeforeInsertHooks, tenantHook)
	case boil.AfterInsertHook:
		tenantAfterInsertHooks = append(tenantAfterInsertHooks, tenantHook)
	case boil.BeforeUpdateHook:
		tenantBeforeUpdateHooks = append(tenantBeforeUpdateHooks, tenantHook)
	case boil.AfterUpdateHook:
		tenantAfterUpdateHooks = append(tenantAfterUpdateHooks, tenantHook)
	case boil.BeforeDeleteHook:
		tenantBeforeDeleteHooks = append(tenantBeforeDeleteHooks, tenantHook)
	case boil.AfterDeleteHook:
		tenantAfterDeleteHooks = append(tenantAfterDeleteHooks, tenantHook)
	case boil.BeforeUpsertHook:
		tenantBeforeUpsertHooks = append(tenantBeforeUpsertHooks, tenantHook)
	case boil.AfterUpsertHook:
		tenantAfterUpsertHooks = append(tenantAfterUpsertHooks, tenantHook)
	}
}

// One returns a single tenant record from the query.
func (q tenantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tenant, error) {
	o := &Tenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tenants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tenant records from the query.
func (q tenantQuery) All(ctx context.Context, exec boil.ContextExecutor) (TenantSlice, error) {
	var o []*Tenant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tenant slice")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tenant records in the query.
func (q tenantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tenants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tenantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tenants exists")
	}

	return count > 0, nil
}

// ParentTenant pointed to by the foreign key.
func (o *Tenant) ParentTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentTenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// ParentTenantTenants retrieves all the tenant's Tenants with an executor via parent_tenant_id column.
func (o *Tenant) ParentTenantTenants(mods ...qm.QueryMod) tenantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tenants\".\"parent_tenant_id\"=?", o.ID),
	)

	return Tenants(queryMods...)
}

// LoadParentTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantL) LoadParentTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		if !queries.IsNil(object.ParentTenantID) {
			args = append(args, object.ParentTenantID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentTenantID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentTenantID) {
				args = append(args, obj.ParentTenantID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, args...),
		qmhelper.WhereIsNull(`tenants.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.ParentTenantTenants = append(foreign.R.ParentTenantTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentTenantID, foreign.ID) {
				local.R.ParentTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.ParentTenantTenants = append(foreign.R.ParentTenantTenants, local)
				break
			}
		}
	}

	return nil
}

// LoadParentTenantTenants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadParentTenantTenants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.parent_tenant_id in ?`, args...),
		qmhelper.WhereIsNull(`tenants.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tenants")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tenants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentTenantTenants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tenantR{}
			}
			foreign.R.ParentTenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentTenantID) {
				local.R.ParentTenantTenants = append(local.R.ParentTenantTenants, foreign)
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.ParentTenant = local
				break
			}
		}
	}

	return nil
}

// SetParentTenant of the tenant to the related item.
// Sets o.R.ParentTenant to related.
// Adds o to related.R.ParentTenantTenants.
func (o *Tenant) SetParentTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentTenantID, related.ID)
	if o.R == nil {
		o.R = &tenantR{
			ParentTenant: related,
		}
	} else {
		o.R.ParentTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			ParentTenantTenants: TenantSlice{o},
		}
	} else {
		related.R.ParentTenantTenants = append(related.R.ParentTenantTenants, o)
	}

	return nil
}

// RemoveParentTenant relationship.
// Sets o.R.ParentTenant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Tenant) RemoveParentTenant(ctx context.Context, exec boil.ContextExecutor, related *Tenant) error {
	var err error

	queries.SetScanner(&o.ParentTenantID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_tenant_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentTenant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentTenantTenants {
		if queries.Equal(o.ParentTenantID, ri.ParentTenantID) {
			continue
		}

		ln := len(related.R.ParentTenantTenants)
		if ln > 1 && i < ln-1 {
			related.R.ParentTenantTenants[i] = related.R.ParentTenantTenants[ln-1]
		}
		related.R.ParentTenantTenants = related.R.ParentTenantTenants[:ln-1]
		break
	}
	return nil
}

// AddParentTenantTenants adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.ParentTenantTenants.
// Sets related.R.ParentTenant appropriately.
func (o *Tenant) AddParentTenantTenants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tenant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentTenantID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tenants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, tenantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentTenantID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			ParentTenantTenants: related,
		}
	} else {
		o.R.ParentTenantTenants = append(o.R.ParentTenantTenants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tenantR{
				ParentTenant: o,
			}
		} else {
			rel.R.ParentTenant = o
		}
	}
	return nil
}

// SetParentTenantTenants removes all previously related items of the
// tenant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTenant's ParentTenantTenants accordingly.
// Replaces o.R.ParentTenantTenants with related.
// Sets related.R.ParentTenant's ParentTenantTenants accordingly.
func (o *Tenant) SetParentTenantTenants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tenant) error {
	query := "update \"tenants\" set \"parent_tenant_id\" = null where \"parent_tenant_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentTenantTenants {
			queries.SetScanner(&rel.ParentTenantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentTenant = nil
		}
		o.R.ParentTenantTenants = nil
	}

	return o.AddParentTenantTenants(ctx, exec, insert, related...)
}

// RemoveParentTenantTenants relationships from objects passed in.
// Removes related items from R.ParentTenantTenants (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTenant.
func (o *Tenant) RemoveParentTenantTenants(ctx context.Context, exec boil.ContextExecutor, related ...*Tenant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentTenantID, nil)
		if rel.R != nil {
			rel.R.ParentTenant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_tenant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTenantTenants {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTenantTenants)
			if ln > 1 && i < ln-1 {
				o.R.ParentTenantTenants[i] = o.R.ParentTenantTenants[ln-1]
			}
			o.R.ParentTenantTenants = o.R.ParentTenantTenants[:ln-1]
			break
		}
	}

	return nil
}

// Tenants retrieves all the records using an executor.
func Tenants(mods ...qm.QueryMod) tenantQuery {
	mods = append(mods, qm.From("\"tenants\""), qmhelper.WhereIsNull("\"tenants\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenants\".*"})
	}

	return tenantQuery{q}
}

// FindTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenant(ctx context.Context, exec boil.ContextExecutor, iD gidx.PrefixedID, selectCols ...string) (*Tenant, error) {
	tenantObj := &Tenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenants\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tenantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tenants")
	}

	if err = tenantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tenantObj, err
	}

	return tenantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tenant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tenants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantInsertCacheMut.RLock()
	cache, cached := tenantInsertCache[key]
	tenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tenants")
	}

	if !cached {
		tenantInsertCacheMut.Lock()
		tenantInsertCache[key] = cache
		tenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tenant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tenant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantUpdateCacheMut.RLock()
	cache, cached := tenantUpdateCache[key]
	tenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tenants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tenants")
	}

	if !cached {
		tenantUpdateCacheMut.Lock()
		tenantUpdateCache[key] = cache
		tenantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tenants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tenant")
	}
	return rowsAff, nil
}

// Delete deletes a single Tenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tenant) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPrimaryKeyMapping)
		sql = "DELETE FROM \"tenants\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tenants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tenantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tenantQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tenants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"tenants\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, tenantPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tenants")
	}

	if len(tenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tenant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTenant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenants\".* FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TenantSlice")
	}

	*o = slice

	return nil
}

// TenantExists checks if the Tenant row exists.
func TenantExists(ctx context.Context, exec boil.ContextExecutor, iD gidx.PrefixedID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenants\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tenants exists")
	}

	return exists, nil
}

// Exists checks if the Tenant row exists.
func (o *Tenant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TenantExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tenant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tenants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantUpsertCacheMut.RLock()
	cache, cached := tenantUpsertCache[key]
	tenantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tenants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tenantPrimaryKeyColumns))
			copy(conflict, tenantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"tenants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tenants")
	}

	if !cached {
		tenantUpsertCacheMut.Lock()
		tenantUpsertCache[key] = cache
		tenantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
